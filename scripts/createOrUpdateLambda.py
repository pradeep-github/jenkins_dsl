#!/usr/bin/python
import os
import boto3
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('name', help='lambda function name')
parser.add_argument('role', help='role name')
parser.add_argument('artifact', help='name of jar/zip file')
parser.add_argument('handler', help='Handle Request')
parser.add_argument('subnet', help='subnet to select')
parser.add_argument('sg', help='security_group to select')
parser.add_argument('runtime',  help='runtime name')
parser.add_argument('memory', help='memory size')
parser.add_argument('timeout',  help='time out')


args = parser.parse_args()
session = boto3.Session()
lambda_client = session.client('lambda')
zfile=os.getcwd()+'/target/'+args.artifact

def create_function(name, role, zfile, handler, subnet,sg,runtime,memory, timeout):
    """ Create, or update if exists, a lambda function """
    with open(zfile, 'rb') as zipfile:
        if name in [f['FunctionName'] for f in lambda_client.list_functions()['Functions']]:
            print 'Updating %s lambda function code' % (name)
            return lambda_client.update_function_code(FunctionName=name, ZipFile=zipfile.read())
           
        else:
            print 'Creating %s lambda function' % (name)
            lfunc = lambda_client.create_function(
                FunctionName=name,
                Runtime=runtime,
                Role=role,
                Handler=handler,
                Description='Generated by Jenkins',
                Timeout=timeout,
                MemorySize=memory,
                Publish=False,
                Code={'ZipFile': open(zfile, 'r').read(),},
                 VpcConfig={'SubnetIds': [subnet],
               'SecurityGroupIds': [sg]},
            )
create_function(args.name,args.role,zfile,args.handler,args.subnet,args.sg,args.runtime,int(args.memory),int(args.timeout))
